{:lein
 {:profile "+cljs"}

 ;; target/shadow-cljs gets deleted by lein frequently which is rather annoying
 :cache-root ".shadow-cljs"

 :verbose true

 :open-file-command :idea

 ;; :ssl {}

 :http
 {:port 8200}

 :nrepl
 {:port 8202
  :middleware []}

 ;; actually unused when using :lein
 :dependencies []

 :source-paths
 ["src/dev"
  "src/main"
  "src/test"]

 :builds
 {:cli
  {:target :npm-module
   :entries [shadow.cljs.npm.cli
             shadow.cljs.npm.transform]
   :output-dir "packages/shadow-cljs/cli/dist"

   :compiler-options
   {:optimizations :advanced
    :infer-externs :auto}

   :devtools
   {:enabled false}}

  :ui
  {:target :browser

   :output-dir "src/ui-release/shadow/cljs/ui/dist/js"
   :dev {:output-dir ".shadow-cljs/ui/js"}
   :asset-path "/js"

   :modules
   {:ui
    {:entries
     [shadow.cljs.ui.app]
     :depends-on
     #{}}}

   :devtools
   {:before-load shadow.cljs.ui.app/stop
    :after-load shadow.cljs.ui.app/start
    :async-require true}}

  ;; test builds

  :browser
  {:target :browser

   :output-dir "out/demo-browser/public/js"
   :asset-path "/js"

   :compiler-options
   {:infer-externs :auto
    :closure-defines
    {demo.browser/FOO "bar"}}

   :module-loader false
   ;; :module-hash-names true
   :modules
   {:base
    {:entries
     [cljs.core demo.sm-test-before]
     :depends-on
     #{}}

    :react
    {:entries ["react" "react-dom"]
     :depends-on #{:base}}

    :demo
    {:entries
     [demo.browser]
     :depends-on
     #{:base
       :react}}

    :extra
    {:entries
     [demo.browser-extra]
     :depends-on
     #{:demo}}

    :worker
    {:entries
     [demo.worker]
     :depends-on #{:base}
     :web-worker true}}

   :js-options
   {:js-provider :shadow
    :resolve
    {"d3"
     {:target :npm
      :require "d3/build/d3"}
     "circular-test"
     {:target :file
      :file "test/dummy/circular-a.js"}
     "babel-test"
     {:target :file
      :file "test/es6/babel.js"}
     }}

   :devtools
   {:http-root "out/demo-browser/public"
    :http-port 8600
    :use-document-host false
    :async-require true
    :before-load-async demo.browser/stop
    :after-load demo.browser/start
    :preloads [shadow.cljs.devtools.client.hud]}}

  :sm-test
  {:target :browser

   :output-dir "out/demo-sm-test/public/js"
   :asset-path "/js"

   :compiler-options
   {:source-map true
    :pretty-print false}

   :modules
   {:base
    {:entries
     [cljs.core]
     :depends-on
     #{}}

    :test
    {:entries [demo.sm-test]
     :depends-on #{:base}}}

   :js-options
   {:js-provider :shadow
    :resolve
    ;; FIXME: can't yet process the process.env.NODE_ENV based require react v16 does
    {"js-sm-test"
     {:target :file
      :file "test/cjs/js-sm-test.js"}}}

   :devtools
   {:http-root "out/demo-sm-test/public"
    :http-port 8605
    :async-require true
    :enabled false}}

  :bootstrap-host
  {:target :browser

   :output-dir "out/demo-selfhost/public/simple/js"
   :asset-path "/simple/js"

   :compiler-options
   {:optimizations :simple}

   :modules
   {:base
    {:entries [demo.selfhost.simple]}}

   :devtools
   {:http-root "out/demo-selfhost/public"
    :http-port 8610
    :before-load demo.selfhost.simple/stop
    :after-load demo.selfhost.simple/start}}

  :bootstrap-worker
  {:target :browser

   :output-dir "out/demo-selfhost/public/worker/js"
   :asset-path "/worker/js"

   :compiler-options
   {:optimizations :simple}

   :modules
   {:base
    {:entries [shadow.cljs.bootstrap.env
               demo.selfhost.host]}
    :worker
    {:entries [demo.selfhost.worker]
     :depends-on #{:base}
     :web-worker true}}

   :devtools
   {:before-load demo.selfhost.host/stop
    :after-load demo.selfhost.host/start}}

  :bootstrap-support
  {:target :bootstrap
   :output-dir "out/demo-selfhost/public/bootstrap"
   :exclude #{cljs.js}
   :entries [cljs.js demo.macro demo.lib reagent.core]
   :macros []}

  :js-only
  {:target :browser
   :output-dir "out/demo-js-only/public/js"
   :asset-path "/js"
   :compiler-options
   {:optimizations :simple
    :pretty-print true}
   :modules {:base {:entries [cljs.core
                              shadow.js]}
             :main {:entries ["/test/cjs/entry.js"]
                    :depends-on #{:base}}}
   :devtools
   {:enabled false
    :console-support false}}

  :closure
  {:target :browser
   :output-dir "out/demo-closure/public/js"
   :asset-path "/js"
   :modules {:base {:entries [cljs.core
                              shadow.js]}
             :main {:entries [demo.reagent]
                    :depends-on #{:base}}}
   :compiler-options
   {:externs ["test/react.ext.js"
              "test/react-dom.ext.js"]
    :closure-warnings {:global-this :off}}
   :js-options
   {:js-provider :closure}
   :devtools
   {:http-root "out/demo-closure/public"
    :http-port 7810
    :autoload true}}

  :closure-es6
  {:target :browser
   :output-dir "out/demo-closure-es6/public/js"
   :asset-path "/js"
   :modules {:main {:entries [demo.closure]}}
   :js-options
   {:js-provider :closure}
   :devtools
   {:http-root "out/demo-closure-es6/public"
    :http-port 7820
    :autoload true}}

  :script
  {:target :node-script
   :main demo.script/main
   :output-to "out/demo-script/script.js"

   :compiler-options
   {:optimizations :advanced}

   :devtools
   {:before-load-async demo.script/stop
    :after-load demo.script/start}}

  :library
  {:target :node-library
   :output-to "out/demo-library/lib.js"
   :exports
   {:hello demo.lib/hello}}

  :custom
  {:target build/custom

   :output-dir "out/demo-browser/js"
   :asset-path "/js"

   :modules
   {:demo {:entries [demo.browser]}}

   :devtools
   {:before-load demo.browser/stop
    :after-load demo.browser/start}}

  :warnings
  {:target :node-script
   :main demo.warnings/main
   :output-to "out/demo-warnings/script.js"}

  :errors
  {:target :node-script
   :main demo.errors/main
   :output-to "out/demo-errors/script.js"}

  :foreign
  {:target :browser
   :output-dir "out/demo-foreign/js"
   :asset-path "/js"
   :compiler-options
   {:externs
    ["src/dev/demo/foreign-ext.js"]}
   :modules
   {:main {:entries [demo.foreign]}}}

  :npm
  {:target :npm-module
   :output-dir "out/demo-npm/lib"
   :entries [demo.npm]}

  :npm-web
  {:target :npm-module
   :runtime :browser
   :entries [demo.browser]
   :output-dir "out/npm-web/src/cljs"
   :compiler-options
   {:externs ["shadow/cljs/npm/externs.js"
              "demo/browser-externs.js"]}}

  :node-repl-test
  {:target :node-script
   :main shadow.cljs.devtools.client.node-repl/main
   :output-to "out/node-repl-dev/node-repl.js"}

  :dce
  {:target :browser
   :output-dir "target/dce-test"
   :compiler-options
   {:fn-invoke-direct true}
   :modules
   {:core {:entries [cljs.core]}
    :main {:entries [demo.dce]
           :depends-on #{:core}}}
   }}}
