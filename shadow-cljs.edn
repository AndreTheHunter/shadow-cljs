{:lein
 {:profile "+cljs"}

 ;; target/shadow-cljs gets deleted by lein frequently which is rather annoying
 :cache-root ".shadow-cljs"

 ;;  :dev-mode true
 :verbose true
 :debug true

 :server
 {:autostart #{}}

 :open-file-command :idea

 :http
 {:port 8200}

 :nrepl
 {:port 8202}

 ;; actually unused when using :lein
 :dependencies []

 :source-paths
 ["src/dev"
  "src/main"
  "src/test"]

 :builds
 {:cli
  {:target :node-library
   :exports {:main shadow.cljs.npm.cli/main}
   :output-to "packages/shadow-cljs/cli/lib.js"

   :compiler-options
   {:optimizations :advanced
    :externs ["shadow/cljs/npm/externs.js"]}

   :devtools
   {:enabled false}}

  :ui
  {:target :browser

   :output-dir "target/shadow-cljs/ui/output/js"
   :asset-path "/js"

   :compiler-options
   {:externs []}

   :modules
   {:ui
    {:entries
     [shadow.cljs.ui.app]
     :depends-on
     #{}}}

   :devtools
   {:before-load shadow.cljs.ui.app/stop
    :after-load shadow.cljs.ui.app/start}}

  ;; test builds

  :browser
  {:target :browser

   :output-dir "out/demo-browser/public/js"
   :asset-path "/js"

   :compiler-options
   {:externs [#_"demo/browser-externs.js"
              "test/react.ext.js"
              "test/react-dom.ext.js"]

    :closure-warnings
    {:global-this :off}

    :closure-defines
    {demo.browser/FOO "bar"}}

   :module-loader false
   :modules
   {:base
    {:entries
     [cljs.core]
     :depends-on
     #{}}

    :react
    {:entries ["react" "react-dom"]
     :depends-on #{:base}}

    :demo
    {:entries
     [demo.browser]
     :depends-on
     #{:base
       :react}}

    :extra
    {:entries
     [demo.browser-extra]
     :depends-on
     #{:demo}}

    :worker
    {:entries
     [demo.worker]
     :depends-on #{:base}
     :web-worker true}}

   :js-options
   {:js-provider :shadow
    :resolve
    ;; FIXME: can't yet process the process.env.NODE_ENV based require react v16 does
    {"react"
     {:target :npm
      :require "react/cjs/react.development.js"
      :require-min "react/cjs/react.production.min.js"}

     "react-dom"
     {:target :npm
      :require "react-dom/cjs/react-dom.development.js"
      :require-min "react-dom/cjs/react-dom.production.min.js"}

     "circular-test"
     {:target :file
      :file "test/dummy/circular-a.js"}
     }}

   :devtools
   {:http-root "out/demo-browser/public"
    :http-port 8600
    :before-load demo.browser/stop
    :after-load demo.browser/start
    :preloads [shadow.cljs.devtools.client.hud]}}

  :bootstrap-host
  {:target :browser

   :output-dir "out/demo-selfhost/public/js"
   :asset-path "/js"

   :compiler-options
   {:optimizations :simple}

   :modules
   {:base
    {:entries [shadow.cljs.bootstrap.env
               demo.selfhost]}
    :worker
    {:entries [demo.selfhost-worker]
     :depends-on #{:base}
     :web-worker true}}

   :devtools
   {:http-root "out/demo-selfhost/public"
    :http-port 8700
    :before-load demo.selfhost/stop
    :after-load demo.selfhost/start}}

  :bootstrap-support
  {:target :bootstrap
   :output-dir "out/demo-selfhost/public/bootstrap"
   :entries [demo.macro reagent.core]
   :macros []}

  :script
  {:target :node-script
   :main demo.script/main
   :output-to "out/demo-script/script.js"

   :devtools
   {:before-load demo.script/stop
    :after-load demo.script/start}}

  :library
  {:target :node-library
   :output-to "out/demo-library/lib.js"
   :exports
   {:hello demo.lib/hello}}

  :custom
  {:target build/custom

   :output-dir "out/demo-browser/js"
   :asset-path "/js"

   :modules
   {:demo {:entries [demo.browser]}}

   :devtools
   {:before-load demo.browser/stop
    :after-load demo.browser/start}}

  :warnings
  {:target :node-script
   :main demo.warnings/main
   :output-to "out/demo-warnings/script.js"}

  :errors
  {:target :node-script
   :main demo.errors/main
   :output-to "out/demo-errors/script.js"}

  :foreign
  {:target :browser
   :output-dir "out/demo-foreign/js"
   :asset-path "/js"
   :compiler-options
   {:externs
    ["src/dev/demo/foreign-ext.js"]}
   :modules
   {:main {:entries [demo.foreign]}}}

  :npm
  {:target :npm-module
   :output-dir "out/demo-npm/lib"
   :entries [demo.npm]}

  :npm-web
  {:target :npm-module
   :runtime :browser
   :entries [demo.browser]
   :output-dir "out/npm-web/src/cljs"
   :compiler-options
   {:externs ["shadow/cljs/npm/externs.js"
              "demo/browser-externs.js"]}}

  :node-repl-test
  {:target :node-script
   :main shadow.cljs.devtools.client.node-repl/main
   :output-to "out/node-repl-dev/node-repl.js"}

  :dce
  {:target :browser
   :output-dir "target/dce-test"
   :compiler-options
   {:fn-invoke-direct true}
   :modules
   {:core {:entries [cljs.core]}
    :main {:entries [demo.dce]
           :depends-on #{:core}}}
   }}}
