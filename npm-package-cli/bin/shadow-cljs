#!/usr/bin/env node

const path = require("path");
const fs = require("fs");
const spawn = require('child_process').spawnSync;

var lein = true;

function fileOlderThan(a, b) {
  var statA = fs.statSync(a);
  var statB = fs.statSync(b);

  return statA.mtime > statB.mtime;
}

var java_args = [];

if (!fs.existsSync(".shadow-cljs")) {
  fs.mkdirSync(".shadow-cljs");
}

if (fs.existsSync("project.clj")) {
  const classpathCacheFile = path.resolve(".shadow-cljs", "lein-classpath.txt");

  var classpath = [];
  if (!fs.existsSync(classpathCacheFile) || fileOlderThan("project.clj", classpathCacheFile)) {
    var result = spawn("lein", ["classpath", classpathCacheFile], { stdio: "inherit" });

    if (result.error) {
      console.log("lein failed", result.error);
      lein = false;
    } else {
      console.log("lein classpath generated successfully");
    }
  }

  if (lein) {
    const cp = fs.readFileSync(classpathCacheFile).toString();
    java_args = java_args.concat(["-cp", cp, "clojure.main", "-m", "shadow.cljs.devtools.cli", "--npm"]);

    console.log("shadow-cljs - using lein classpath");
  }
}

if (java_args.length == 0) {
  const version = require("./version.json");
  console.log("shadow-cljs - using package.json", version);

  java_args = [
    "-jar",
    require("shadow-cljs-jar/path"), // this just exports the path to the actual launcher jar
    version,
    "--npm"
  ];
}

java_args = java_args.concat(process.argv.slice(2));

const java_opts = {
  stdio: 'inherit'
};

function run(java_cmd) {
  return spawn(java_cmd, java_args, java_opts);
}

var result = run("java");

// assume java didn't exist, try node-jre
if (result.error && result.error.errno == "ENOENT") {
  console.log("shadow-cljs - java not found, trying node-jre");
  try {
    var jre = require('node-jre');
    run(jre.driver());
  } catch (err) {
    console.log("please install a java sdk or 'npm install node-jre'");
  }
}


